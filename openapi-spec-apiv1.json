{
  "openapi": "3.0.1",
  "info": {
    "title": "GROWI REST API v1",
    "version": "7.3.4-RC.0"
  },
  "servers": [
    {
      "url": "{server}/_api",
      "variables": {
        "server": {
          "default": "https://demo.growi.org",
          "description": "The base URL for the GROWI API except for the version path (/_api). This can be set to your GROWI instance URL."
        }
      }
    },
    {
      "url": "https://demo.growi.org/_api"
    }
  ],
  "security": [
    {
      "bearer": [],
      "accessTokenInQuery": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Access token generated by each GROWI users"
      },
      "accessTokenInQuery": {
        "type": "apiKey",
        "name": "access_token",
        "in": "query",
        "description": "Access token generated by each GROWI users"
      }
    },
    "schemas": {
      "CommentBody": {
        "description": "The type for Comment.comment",
        "type": "string",
        "example": "good"
      },
      "CommentPosition": {
        "description": "comment position",
        "type": "number",
        "example": 0
      },
      "Comment": {
        "description": "Comment",
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "page": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "creator": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "revision": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "comment": {
            "$ref": "#/components/schemas/CommentBody"
          },
          "commentPosition": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "PageTagsData": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of tag names associated with the page",
            "example": [
              "javascript",
              "tutorial",
              "backend"
            ]
          }
        }
      },
      "UpdatePostData": {
        "type": "object",
        "properties": {
          "updatePost": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of channel names for notifications",
            "example": [
              "general",
              "development",
              "notifications"
            ]
          }
        }
      },
      "PageRemoveData": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Path of the deleted page",
            "example": "/user/example"
          },
          "isRecursively": {
            "type": "boolean",
            "description": "Whether deletion was recursive",
            "example": true
          },
          "isCompletely": {
            "type": "boolean",
            "description": "Whether deletion was complete",
            "example": false
          }
        }
      },
      "PageRevertData": {
        "type": "object",
        "properties": {
          "page": {
            "type": "object",
            "description": "Restored page object",
            "properties": {
              "_id": {
                "type": "string",
                "format": "ObjectId",
                "example": "507f1f77bcf86cd799439011"
              },
              "path": {
                "type": "string",
                "example": "/user/example"
              },
              "title": {
                "type": "string",
                "example": "Example Page"
              },
              "status": {
                "type": "string",
                "example": "published"
              }
            }
          }
        }
      },
      "PageUnlinkData": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path for which redirects were removed",
            "example": "/user/example"
          }
        }
      },
      "ElasticsearchResultMeta": {
        "type": "object",
        "properties": {
          "took": {
            "type": "number",
            "description": "Time Elasticsearch took to execute a search(milliseconds)",
            "example": 34
          },
          "total": {
            "type": "number",
            "description": "Number of documents matching search criteria",
            "example": 2
          },
          "results": {
            "type": "number",
            "description": "Actual array length of search results",
            "example": 2
          }
        }
      },
      "ElasticsearchResult": {
        "description": "Elasticsearch result v1",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ElasticsearchResultMeta"
          }
        }
      },
      "User": {
        "description": "User",
        "type": "object",
        "properties": {
          "__v": {
            "type": "number",
            "description": "record version",
            "example": 0
          },
          "_id": {
            "type": "string",
            "description": "user ID",
            "example": "5ae5fccfc5577b0004dbd8ab"
          },
          "lang": {
            "type": "string",
            "description": "language",
            "example": "en_US"
          },
          "status": {
            "type": "integer",
            "description": "status",
            "example": 0
          },
          "admin": {
            "type": "boolean",
            "description": "whether the admin",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "E-Mail address",
            "example": "alice@aaa.aaa"
          },
          "username": {
            "type": "string",
            "description": "username",
            "example": "alice"
          },
          "name": {
            "type": "string",
            "description": "full name",
            "example": "Alice"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "Attachment": {
        "description": "Attachment",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "attachment ID",
            "example": "5e0734e072560e001761fa67"
          },
          "__v": {
            "type": "number",
            "description": "attachment version",
            "example": 0
          },
          "fileFormat": {
            "type": "string",
            "description": "file format in MIME",
            "example": "text/plain"
          },
          "fileName": {
            "type": "string",
            "description": "file name",
            "example": "601b7c59d43a042c0117e08dd37aad0aimage.txt"
          },
          "originalName": {
            "type": "string",
            "description": "original file name",
            "example": "file.txt"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "page": {
            "type": "string",
            "description": "page ID attached at",
            "example": "5e07345972560e001761fa63"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "fileSize": {
            "type": "number",
            "description": "file size",
            "example": 3494332
          },
          "url": {
            "type": "string",
            "description": "attachment URL",
            "example": "http://localhost/files/5e0734e072560e001761fa67"
          },
          "filePathProxied": {
            "type": "string",
            "description": "file path proxied",
            "example": "/attachment/5e0734e072560e001761fa67"
          },
          "downloadPathProxied": {
            "type": "string",
            "description": "download path proxied",
            "example": "/download/5e0734e072560e001761fa67"
          }
        }
      },
      "AttachmentProfile": {
        "description": "Attachment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "attachment ID",
            "example": "5e0734e072560e001761fa67"
          },
          "_id": {
            "type": "string",
            "description": "attachment ID",
            "example": "5e0734e072560e001761fa67"
          },
          "__v": {
            "type": "number",
            "description": "attachment version",
            "example": 0
          },
          "fileFormat": {
            "type": "string",
            "description": "file format in MIME",
            "example": "image/png"
          },
          "fileName": {
            "type": "string",
            "description": "file name",
            "example": "601b7c59d43a042c0117e08dd37aad0a.png"
          },
          "originalName": {
            "type": "string",
            "description": "original file name",
            "example": "profile.png"
          },
          "creator": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "page": {
            "type": "string",
            "description": "page ID attached at",
            "example": null
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "fileSize": {
            "type": "number",
            "description": "file size",
            "example": 3494332
          },
          "filePathProxied": {
            "type": "string",
            "description": "file path proxied",
            "example": "/attachment/5e0734e072560e001761fa67"
          },
          "downloadPathProxied": {
            "type": "string",
            "description": "download path proxied",
            "example": "/download/5e0734e072560e001761fa67"
          }
        }
      },
      "ErrorV3": {
        "description": "Error for APIv3",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "error message"
          },
          "code": {
            "type": "string",
            "example": "someapi-error-with-something"
          },
          "stack": {
            "type": "object"
          },
          "args": {
            "type": "object",
            "example": {
              "name": "Josh",
              "age": 20
            }
          }
        }
      },
      "ObjectId": {
        "type": "string",
        "description": "Object ID",
        "example": "5ae5fccfc5577b0004dbd8ab"
      },
      "PageForTreeItem": {
        "description": "Page",
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "path": {
            "$ref": "#/components/schemas/PagePath"
          },
          "parent": {
            "$ref": "#/components/schemas/PagePath"
          },
          "grant": {
            "$ref": "#/components/schemas/PageGrant"
          },
          "lastUpdateUser": {
            "$ref": "#/components/schemas/User"
          },
          "descendantCount": {
            "type": "number"
          },
          "isEmpty": {
            "type": "boolean"
          },
          "wip": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "date updated at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "PagePath": {
        "description": "Page path",
        "type": "string",
        "example": "/path/to/page"
      },
      "PageGrant": {
        "description": "Grant for page",
        "type": "number",
        "example": 1
      },
      "PageInfo": {
        "description": "Basic page information",
        "type": "object",
        "properties": {
          "isV5Compatible": {
            "type": "boolean",
            "description": "Whether the page is compatible with v5"
          },
          "isEmpty": {
            "type": "boolean",
            "description": "Whether the page is empty"
          },
          "isMovable": {
            "type": "boolean",
            "description": "Whether the page is movable"
          },
          "isDeletable": {
            "type": "boolean",
            "description": "Whether the page is deletable"
          },
          "isAbleToDeleteCompletely": {
            "type": "boolean",
            "description": "Whether the page is able to delete completely"
          },
          "isRevertible": {
            "type": "boolean",
            "description": "Whether the page is revertible"
          }
        }
      },
      "PageInfoForEntity": {
        "description": "Page information for entity (extends IPageInfo)",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageInfo"
          },
          {
            "type": "object",
            "properties": {
              "bookmarkCount": {
                "type": "number",
                "description": "Number of bookmarks"
              },
              "sumOfLikers": {
                "type": "number",
                "description": "Number of users who have liked the page"
              },
              "likerIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ids of users who have liked the page",
                "example": [
                  "5e07345972560e001761fa63"
                ]
              },
              "sumOfSeenUsers": {
                "type": "number",
                "description": "Number of users who have seen the page"
              },
              "seenUserIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ids of users who have seen the page",
                "example": [
                  "5e07345972560e001761fa63"
                ]
              },
              "contentAge": {
                "type": "number",
                "description": "Content age"
              },
              "descendantCount": {
                "type": "number",
                "description": "Number of descendant pages"
              },
              "commentCount": {
                "type": "number",
                "description": "Number of comments"
              }
            }
          }
        ]
      },
      "PageInfoForOperation": {
        "description": "Page information for operation (extends IPageInfoForEntity)",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageInfoForEntity"
          },
          {
            "type": "object",
            "properties": {
              "isBookmarked": {
                "type": "boolean",
                "description": "Whether the page is bookmarked by the logged in user"
              },
              "isLiked": {
                "type": "boolean",
                "description": "Whether the page is liked by the logged in user"
              },
              "subscriptionStatus": {
                "type": "string",
                "description": "Subscription status",
                "enum": [
                  "SUBSCRIBE",
                  "UNSUBSCRIBE"
                ]
              }
            }
          }
        ]
      },
      "PageInfoForListing": {
        "description": "Page information for listing (extends IPageInfoForEntity with revision short body)",
        "allOf": [
          {
            "$ref": "#/components/schemas/PageInfoForEntity"
          },
          {
            "type": "object",
            "properties": {
              "revisionShortBody": {
                "type": "string",
                "description": "Short body of the revision"
              }
            }
          }
        ]
      },
      "PageInfoAll": {
        "description": "Page information (union of all page info types)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PageInfo"
          },
          {
            "$ref": "#/components/schemas/PageInfoForEntity"
          },
          {
            "$ref": "#/components/schemas/PageInfoForOperation"
          },
          {
            "$ref": "#/components/schemas/PageInfoForListing"
          }
        ]
      },
      "Page": {
        "description": "Page",
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "commentCount": {
            "type": "number",
            "description": "count of comments",
            "example": 3
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "extended": {
            "type": "object",
            "description": "extend data",
            "example": {}
          },
          "grant": {
            "$ref": "#/components/schemas/PageGrant"
          },
          "grantedUsers": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": [
              "5ae5fccfc5577b0004dbd8ab"
            ]
          },
          "lastUpdateUser": {
            "$ref": "#/components/schemas/User"
          },
          "liker": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": []
          },
          "path": {
            "$ref": "#/components/schemas/PagePath"
          },
          "revision": {
            "type": "string",
            "description": "page revision"
          },
          "seenUsers": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": [
              "5ae5fccfc5577b0004dbd8ab"
            ]
          },
          "status": {
            "type": "string",
            "description": "status",
            "enum": [
              "wip",
              "published",
              "deleted",
              "deprecated"
            ],
            "example": "published"
          },
          "updatedAt": {
            "type": "string",
            "description": "date updated at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "Offset": {
        "description": "Offset for pagination",
        "type": "integer",
        "example": 0
      },
      "Limit": {
        "description": "Limit for pagination",
        "type": "integer",
        "example": 10
      },
      "PaginateResult": {
        "description": "PaginateResult",
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "description": "Array of documents",
            "items": {
              "type": "object"
            }
          },
          "totalDocs": {
            "type": "number",
            "description": "Total number of documents in collection that match a query"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "hasPrevPage": {
            "type": "number",
            "description": "Availability of prev page."
          },
          "hasNextPage": {
            "type": "number",
            "description": "Availability of next page."
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages."
          },
          "offset": {
            "description": "Only if specified or default page/offset values were used",
            "$ref": "#/components/schemas/Offset"
          },
          "prefPage": {
            "type": "number",
            "description": "Previous page number if available or NULL"
          },
          "nextPage": {
            "type": "number",
            "description": "Next page number if available or NULL"
          },
          "pagingCounter": {
            "type": "number",
            "description": "The starting sl. number of first document."
          },
          "meta": {
            "type": "number",
            "description": "Object of pagination meta data (Default false)."
          }
        }
      },
      "V1PaginateResult": {
        "description": "Paginate result v1",
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of documents in collection that match a query",
                "example": 35
              },
              "limit": {
                "$ref": "#/components/schemas/Limit"
              },
              "offset": {
                "description": "Only if specified or default page/offset values were used",
                "$ref": "#/components/schemas/Offset"
              }
            }
          },
          "data": {
            "type": "object",
            "description": "Object of pagination meta data."
          }
        }
      },
      "RevisionBody": {
        "description": "Revision content body",
        "type": "string",
        "example": "# Header\n\n- foo\n- bar\n"
      },
      "Revision": {
        "description": "Revision",
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "author": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "body": {
            "$ref": "#/components/schemas/RevisionBody"
          },
          "format": {
            "type": "string",
            "description": "format",
            "example": "markdown"
          },
          "path": {
            "type": "string",
            "description": "path",
            "example": "/user/alice/test"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "Tags": {
        "description": "Tags",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagName"
        },
        "example": [
          "daily",
          "report",
          "tips"
        ]
      },
      "TagName": {
        "description": "Tag name",
        "type": "string",
        "example": "daily"
      },
      "Tag": {
        "description": "Tag",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "tag ID",
            "example": "5e2d6aede35da4004ef7e0b7"
          },
          "name": {
            "$ref": "#/components/schemas/TagName"
          },
          "count": {
            "type": "number",
            "description": "Count of tagged pages",
            "example": 3
          }
        }
      },
      "ApiResponseBase": {
        "type": "object",
        "required": [
          "ok"
        ],
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          }
        }
      },
      "ApiResponseSuccess": {
        "description": "Successful API response",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "ok": {
                "type": "boolean",
                "enum": [
                  true
                ],
                "example": true,
                "description": "Success indicator (always true for successful responses)"
              }
            }
          }
        ]
      },
      "ApiResponseError": {
        "description": "Error API response",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "ok": {
                "type": "boolean",
                "enum": [
                  false
                ],
                "example": false,
                "description": "Success indicator (always false for error responses)"
              },
              "error": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Simple error message",
                    "example": "Invalid parameter"
                  },
                  {
                    "type": "object",
                    "description": "Detailed error object",
                    "example": {
                      "code": "VALIDATION_ERROR",
                      "message": "Field validation failed"
                    }
                  }
                ],
                "description": "Error message or error object containing details about the failure"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "PageTagsSuccess": {
        "description": "Successfully retrieved page tags",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                },
                {
                  "$ref": "#/components/schemas/PageTagsData"
                }
              ]
            }
          }
        }
      },
      "UpdatePostSuccess": {
        "description": "Successfully retrieved UpdatePost settings",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                },
                {
                  "$ref": "#/components/schemas/UpdatePostData"
                }
              ]
            }
          }
        }
      },
      "PageRemoveSuccess": {
        "description": "Page successfully deleted",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                },
                {
                  "$ref": "#/components/schemas/PageRemoveData"
                }
              ]
            }
          }
        }
      },
      "PageRevertSuccess": {
        "description": "Page successfully restored",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                },
                {
                  "$ref": "#/components/schemas/PageRevertData"
                }
              ]
            }
          }
        }
      },
      "PageUnlinkSuccess": {
        "description": "Successfully removed page redirects",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                },
                {
                  "$ref": "#/components/schemas/PageUnlinkData"
                }
              ]
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "examples": {
              "missingParameter": {
                "summary": "Missing required parameter",
                "value": {
                  "ok": false,
                  "error": "Invalid parameter"
                }
              },
              "validationError": {
                "summary": "Validation error",
                "value": {
                  "ok": false,
                  "error": "Validation failed"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "example": {
              "ok": false,
              "error": "Access denied"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "examples": {
              "resourceNotFound": {
                "summary": "Resource not found",
                "value": {
                  "ok": false,
                  "error": "Resource not found"
                }
              },
              "notFoundOrForbidden": {
                "summary": "Resource not found or forbidden",
                "value": {
                  "ok": false,
                  "error": "notfound_or_forbidden"
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "examples": {
              "resourceConflict": {
                "summary": "Resource conflict",
                "value": {
                  "ok": false,
                  "error": "Resource conflict"
                }
              },
              "outdated": {
                "summary": "Resource was updated by someone else",
                "value": {
                  "ok": false,
                  "error": "outdated"
                }
              },
              "alreadyExists": {
                "summary": "Resource already exists",
                "value": {
                  "ok": false,
                  "error": "already_exists"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "example": {
              "ok": false,
              "error": "Internal server error"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/comments.get": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComments",
        "summary": "/comments.get",
        "description": "Get comments of the page of the revision",
        "parameters": [
          {
            "in": "query",
            "name": "page_id",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "in": "query",
            "name": "revision_id",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get comments of the page of the revision.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "comments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Comment"
                          },
                          "description": "List of comments for the page revision"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/comments.add": {
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "addComment",
        "summary": "/comments.add",
        "description": "Post comment for the page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "commentForm": {
                    "type": "object",
                    "properties": {
                      "page_id": {
                        "$ref": "#/components/schemas/ObjectId"
                      },
                      "revision_id": {
                        "$ref": "#/components/schemas/ObjectId"
                      },
                      "comment": {
                        "$ref": "#/components/schemas/CommentBody"
                      },
                      "comment_position": {
                        "$ref": "#/components/schemas/CommentPosition"
                      }
                    }
                  }
                },
                "required": [
                  "commentForm"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to post comment for the page.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "comment": {
                          "$ref": "#/components/schemas/Comment",
                          "description": "The newly created comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/comments.update": {
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "updateComment",
        "summary": "/comments.update",
        "description": "Update comment dody",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "form": {
                    "type": "object",
                    "properties": {
                      "commentForm": {
                        "type": "object",
                        "properties": {
                          "page_id": {
                            "$ref": "#/components/schemas/ObjectId"
                          },
                          "revision_id": {
                            "$ref": "#/components/schemas/ObjectId"
                          },
                          "comment_id": {
                            "$ref": "#/components/schemas/ObjectId"
                          },
                          "comment": {
                            "$ref": "#/components/schemas/CommentBody"
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "form"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update comment dody.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "comment": {
                          "$ref": "#/components/schemas/Comment",
                          "description": "The updated comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/comments.remove": {
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "removeComment",
        "summary": "/comments.remove",
        "description": "Remove specified comment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment_id": {
                    "$ref": "#/components/schemas/ObjectId"
                  }
                },
                "required": [
                  "comment_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to remove specified comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "/login",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loginForm": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "/register",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registerForm": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Register successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages.getPageTag": {
      "get": {
        "tags": [
          "Pages"
        ],
        "operationId": "getPageTag",
        "summary": "Get page tags",
        "description": "Retrieve all tags associated with a specific page",
        "parameters": [
          {
            "in": "query",
            "name": "pageId",
            "required": true,
            "description": "Unique identifier of the page",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PageTagsSuccess"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pages.updatePost": {
      "get": {
        "tags": [
          "Pages"
        ],
        "operationId": "getUpdatePost",
        "summary": "Get UpdatePost settings",
        "description": "Retrieve UpdatePost notification settings for a specific path",
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": true,
            "description": "Page path to get UpdatePost settings for",
            "schema": {
              "type": "string",
              "example": "/user/example"
            },
            "examples": {
              "userPage": {
                "value": "/user/john",
                "description": "User page path"
              },
              "projectPage": {
                "value": "/project/myproject",
                "description": "Project page path"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatePostSuccess"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pages.remove": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "removePage",
        "summary": "Remove page",
        "description": "Delete a page either softly or completely, with optional recursive deletion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "page_id"
                ],
                "properties": {
                  "page_id": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "Unique identifier of the page to delete",
                    "example": "507f1f77bcf86cd799439011"
                  },
                  "revision_id": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "Revision ID for conflict detection",
                    "example": "507f1f77bcf86cd799439012"
                  },
                  "completely": {
                    "type": "boolean",
                    "description": "Whether to delete the page completely (true) or soft delete (false)",
                    "default": false,
                    "example": false
                  },
                  "recursively": {
                    "type": "boolean",
                    "description": "Whether to delete child pages recursively",
                    "default": false,
                    "example": true
                  }
                }
              },
              "examples": {
                "softDelete": {
                  "summary": "Soft delete single page",
                  "value": {
                    "page_id": "507f1f77bcf86cd799439011",
                    "revision_id": "507f1f77bcf86cd799439012"
                  }
                },
                "recursiveDelete": {
                  "summary": "Recursive soft delete",
                  "value": {
                    "page_id": "507f1f77bcf86cd799439011",
                    "recursively": true
                  }
                },
                "completeDelete": {
                  "summary": "Complete deletion",
                  "value": {
                    "page_id": "507f1f77bcf86cd799439011",
                    "completely": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PageRemoveSuccess"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pages.revertRemove": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "revertRemovePage",
        "summary": "Revert removed page",
        "description": "Restore a previously deleted (soft-deleted) page",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "page_id"
                ],
                "properties": {
                  "page_id": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "Unique identifier of the page to restore",
                    "example": "507f1f77bcf86cd799439011"
                  },
                  "recursively": {
                    "type": "boolean",
                    "description": "Whether to restore child pages recursively",
                    "default": false,
                    "example": true
                  }
                }
              },
              "examples": {
                "singleRevert": {
                  "summary": "Revert single page",
                  "value": {
                    "page_id": "507f1f77bcf86cd799439011"
                  }
                },
                "recursiveRevert": {
                  "summary": "Revert page and children",
                  "value": {
                    "page_id": "507f1f77bcf86cd799439011",
                    "recursively": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PageRevertSuccess"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pages.unlink": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "unlinkPage",
        "summary": "Remove page redirects",
        "description": "Remove all redirect entries that point to the specified page path",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "path"
                ],
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Target path to remove redirects for",
                    "example": "/user/example"
                  }
                }
              },
              "examples": {
                "unlinkPage": {
                  "summary": "Remove redirects to a page",
                  "value": {
                    "path": "/user/example"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PageUnlinkSuccess"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "operationId": "searchPages",
        "summary": "/search",
        "description": "Search pages",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string",
              "description": "keyword",
              "example": "daily report"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "$ref": "#/components/schemas/PagePath"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get list of pages.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "meta": {
                          "$ref": "#/components/schemas/ElasticsearchResultMeta",
                          "description": "Elasticsearch metadata"
                        },
                        "totalCount": {
                          "type": "integer",
                          "description": "total count of pages",
                          "example": 35
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Page"
                          },
                          "description": "page list"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags.search": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "searchTags",
        "summary": "/tags.search",
        "description": "Search tags",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string",
              "description": "keyword",
              "example": "daily"
            },
            "description": "keyword to search"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to tag list.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "$ref": "#/components/schemas/Tags",
                          "description": "List of matching tags"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags.update": {
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "updateTag",
        "summary": "/tags.update",
        "description": "Update tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "$ref": "#/components/schemas/ObjectId"
                  },
                  "revisionId": {
                    "$ref": "#/components/schemas/ObjectId"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update tag.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "$ref": "#/components/schemas/Tags",
                          "description": "Updated tags for the page"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags.list": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "listTags",
        "summary": "/tags.list",
        "description": "Get tags",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to tag list.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Tag"
                          },
                          "description": "List of tags with count information"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user-activation/{token}": {
      "get": {
        "summary": "/user-activation/{token}",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activation successful",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/attachments.uploadProfileImage": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "operationId": "uploadProfileImage",
        "summary": "/attachments.uploadProfileImage",
        "description": "Upload profile image",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment data"
                  },
                  "user": {
                    "type": "string",
                    "description": "user to set profile image"
                  }
                }
              },
              "encoding": {
                "path": {
                  "contentType": "application/x-www-form-urlencoded"
                }
              }
            },
            "*/*": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment data"
                  },
                  "user": {
                    "type": "string",
                    "description": "user to set profile"
                  }
                }
              },
              "encoding": {
                "path": {
                  "contentType": "application/x-www-form-urlencoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to add attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseSuccess"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "attachment": {
                          "$ref": "#/components/schemas/AttachmentProfile",
                          "description": "The uploaded profile image attachment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments.remove": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "operationId": "removeAttachment",
        "summary": "/attachments.remove",
        "description": "Remove attachment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "attachment_id": {
                    "$ref": "#/components/schemas/ObjectId"
                  }
                },
                "required": [
                  "attachment_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to remove attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments.removeProfileImage": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "operationId": "removeProfileImage",
        "summary": "/attachments.removeProfileImage",
        "description": "Remove profile image",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "user to remove profile image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to add attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Comments"
    },
    {
      "name": "Pages"
    },
    {
      "name": "Attachments"
    }
  ]
}